#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="auto76")]
	public partial class SuppliersDataContext : System.Data.Linq.DataContext
	{
        public IEnumerable<supplier> GetAllSuppliers()
        {
            var items = this.suppliers.Select(item => item).OrderBy(item => item.name);

            return items;
        }

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertsupplier(supplier instance);
    partial void Updatesupplier(supplier instance);
    partial void Deletesupplier(supplier instance);
    #endregion
		
		public SuppliersDataContext() : 
				base(global::WpfApp2.Properties.Settings.Default.auto76ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SuppliersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SuppliersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SuppliersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SuppliersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<supplier> suppliers
		{
			get
			{
				return this.GetTable<supplier>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.suppliers")]
	public partial class supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _phone;
		
		private string _full_name;
		
		private string _addres;
		
		private string _kpp;
		
		private string _inn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnphoneChanging(int value);
    partial void OnphoneChanged();
    partial void Onfull_nameChanging(string value);
    partial void Onfull_nameChanged();
    partial void OnaddresChanging(string value);
    partial void OnaddresChanged();
    partial void OnkppChanging(string value);
    partial void OnkppChanged();
    partial void OninnChanging(string value);
    partial void OninnChanged();
    #endregion
		
		public supplier()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX)", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Int")]
		public int phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_full_name", DbType="VarChar(MAX)")]
		public string full_name
		{
			get
			{
				return this._full_name;
			}
			set
			{
				if ((this._full_name != value))
				{
					this.Onfull_nameChanging(value);
					this.SendPropertyChanging();
					this._full_name = value;
					this.SendPropertyChanged("full_name");
					this.Onfull_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addres", DbType="VarChar(MAX)")]
		public string addres
		{
			get
			{
				return this._addres;
			}
			set
			{
				if ((this._addres != value))
				{
					this.OnaddresChanging(value);
					this.SendPropertyChanging();
					this._addres = value;
					this.SendPropertyChanged("addres");
					this.OnaddresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kpp", DbType="VarChar(MAX)")]
		public string kpp
		{
			get
			{
				return this._kpp;
			}
			set
			{
				if ((this._kpp != value))
				{
					this.OnkppChanging(value);
					this.SendPropertyChanging();
					this._kpp = value;
					this.SendPropertyChanged("kpp");
					this.OnkppChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inn", DbType="VarChar(MAX)")]
		public string inn
		{
			get
			{
				return this._inn;
			}
			set
			{
				if ((this._inn != value))
				{
					this.OninnChanging(value);
					this.SendPropertyChanging();
					this._inn = value;
					this.SendPropertyChanged("inn");
					this.OninnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
